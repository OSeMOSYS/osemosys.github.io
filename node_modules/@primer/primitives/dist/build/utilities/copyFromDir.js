var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/* istanbul ignore file */
import { copyFile, readdir, mkdir } from 'fs/promises';
/**
 * copyFromDir
 * @description Copies all files from source folder to destination
 * @param source path
 * @param destination path
 * @returns promise of file name array
 */
export const copyFromDir = (source, destination) => __awaiter(void 0, void 0, void 0, function* () {
    // adjust trailing slash
    const src = `${source.replace(/\/$/, '')}`;
    const dest = `${destination.replace(/\/$/, '')}`;
    // create dest if it does not exists
    yield mkdir(dest, { recursive: true });
    // read files from source
    const files = yield readdir(src);
    for (const file of files) {
        copyFile(`${src}/${file}`, `${dest}/${file}`);
    }
    return files;
});
