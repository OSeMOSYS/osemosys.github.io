import { z } from 'zod';
export declare const colorToken: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
    $description: z.ZodOptional<z.ZodString>;
    $deprecated: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
}, {
    $value: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>;
    alpha: z.ZodNullable<z.ZodOptional<z.ZodEffects<z.ZodAny, any, any>>>;
}>, {
    $type: z.ZodLiteral<"string" | "number" | "border" | "color" | "fontFamily" | "fontWeight" | "dimension" | "duration" | "shadow" | "typography" | "cubicBezier" | "custom-viewportRange">;
    $extensions: z.ZodOptional<z.ZodObject<{
        'org.primer.figma': z.ZodOptional<z.ZodObject<{
            collection: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            modeOverride: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
            scopes: z.ZodOptional<z.ZodEffects<z.ZodArray<z.ZodString, "many">, string[], string[]>>;
            group: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            group?: string | undefined;
            collection?: string | undefined;
            modeOverride?: string | undefined;
            scopes?: string[] | undefined;
        }, {
            group?: string | undefined;
            collection?: string | undefined;
            modeOverride?: string | undefined;
            scopes?: string[] | undefined;
        }>>;
        'org.primer.overrides': z.ZodOptional<z.ZodObject<{
            light: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>, z.ZodObject<{
                $description: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                $deprecated: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>>;
                $value: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>>;
                alpha: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodEffects<z.ZodAny, any, any>>>>;
            }, "strict", z.ZodTypeAny, {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            }, {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            }>]>>;
            'light-tritanopia': z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>, z.ZodObject<{
                $description: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                $deprecated: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>>;
                $value: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>>;
                alpha: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodEffects<z.ZodAny, any, any>>>>;
            }, "strict", z.ZodTypeAny, {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            }, {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            }>]>>;
            'light-protanopia-deuteranopia': z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>, z.ZodObject<{
                $description: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                $deprecated: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>>;
                $value: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>>;
                alpha: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodEffects<z.ZodAny, any, any>>>>;
            }, "strict", z.ZodTypeAny, {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            }, {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            }>]>>;
            'light-high-contrast': z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>, z.ZodObject<{
                $description: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                $deprecated: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>>;
                $value: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>>;
                alpha: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodEffects<z.ZodAny, any, any>>>>;
            }, "strict", z.ZodTypeAny, {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            }, {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            }>]>>;
            dark: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>, z.ZodObject<{
                $description: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                $deprecated: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>>;
                $value: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>>;
                alpha: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodEffects<z.ZodAny, any, any>>>>;
            }, "strict", z.ZodTypeAny, {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            }, {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            }>]>>;
            'dark-tritanopia': z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>, z.ZodObject<{
                $description: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                $deprecated: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>>;
                $value: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>>;
                alpha: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodEffects<z.ZodAny, any, any>>>>;
            }, "strict", z.ZodTypeAny, {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            }, {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            }>]>>;
            'dark-protanopia-deuteranopia': z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>, z.ZodObject<{
                $description: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                $deprecated: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>>;
                $value: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>>;
                alpha: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodEffects<z.ZodAny, any, any>>>>;
            }, "strict", z.ZodTypeAny, {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            }, {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            }>]>>;
            'dark-high-contrast': z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>, z.ZodObject<{
                $description: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                $deprecated: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>>;
                $value: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>>;
                alpha: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodEffects<z.ZodAny, any, any>>>>;
            }, "strict", z.ZodTypeAny, {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            }, {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            }>]>>;
            'dark-dimmed': z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>, z.ZodObject<{
                $description: z.ZodOptional<z.ZodOptional<z.ZodString>>;
                $deprecated: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>>;
                $value: z.ZodOptional<z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodEffects<z.ZodString, string, string>]>>;
                alpha: z.ZodOptional<z.ZodNullable<z.ZodOptional<z.ZodEffects<z.ZodAny, any, any>>>>;
            }, "strict", z.ZodTypeAny, {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            }, {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            }>]>>;
        }, "strict", z.ZodTypeAny, {
            light?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            dark?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'light-tritanopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'light-protanopia-deuteranopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'light-high-contrast'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-tritanopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-protanopia-deuteranopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-high-contrast'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-dimmed'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
        }, {
            light?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            dark?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'light-tritanopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'light-protanopia-deuteranopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'light-high-contrast'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-tritanopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-protanopia-deuteranopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-high-contrast'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-dimmed'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
        }>>;
    }, "strict", z.ZodTypeAny, {
        'org.primer.figma'?: {
            group?: string | undefined;
            collection?: string | undefined;
            modeOverride?: string | undefined;
            scopes?: string[] | undefined;
        } | undefined;
        'org.primer.overrides'?: {
            light?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            dark?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'light-tritanopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'light-protanopia-deuteranopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'light-high-contrast'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-tritanopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-protanopia-deuteranopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-high-contrast'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-dimmed'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
        } | undefined;
    }, {
        'org.primer.figma'?: {
            group?: string | undefined;
            collection?: string | undefined;
            modeOverride?: string | undefined;
            scopes?: string[] | undefined;
        } | undefined;
        'org.primer.overrides'?: {
            light?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            dark?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'light-tritanopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'light-protanopia-deuteranopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'light-high-contrast'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-tritanopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-protanopia-deuteranopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-high-contrast'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-dimmed'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
        } | undefined;
    }>>;
}>, "strict", z.ZodTypeAny, {
    $value: string;
    $type: "string" | "number" | "border" | "color" | "fontFamily" | "fontWeight" | "dimension" | "duration" | "shadow" | "typography" | "cubicBezier" | "custom-viewportRange";
    alpha?: any;
    $description?: string | undefined;
    $deprecated?: string | boolean | undefined;
    $extensions?: {
        'org.primer.figma'?: {
            group?: string | undefined;
            collection?: string | undefined;
            modeOverride?: string | undefined;
            scopes?: string[] | undefined;
        } | undefined;
        'org.primer.overrides'?: {
            light?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            dark?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'light-tritanopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'light-protanopia-deuteranopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'light-high-contrast'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-tritanopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-protanopia-deuteranopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-high-contrast'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-dimmed'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
        } | undefined;
    } | undefined;
}, {
    $value: string;
    $type: "string" | "number" | "border" | "color" | "fontFamily" | "fontWeight" | "dimension" | "duration" | "shadow" | "typography" | "cubicBezier" | "custom-viewportRange";
    alpha?: any;
    $description?: string | undefined;
    $deprecated?: string | boolean | undefined;
    $extensions?: {
        'org.primer.figma'?: {
            group?: string | undefined;
            collection?: string | undefined;
            modeOverride?: string | undefined;
            scopes?: string[] | undefined;
        } | undefined;
        'org.primer.overrides'?: {
            light?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            dark?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'light-tritanopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'light-protanopia-deuteranopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'light-high-contrast'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-tritanopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-protanopia-deuteranopia'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-high-contrast'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
            'dark-dimmed'?: string | {
                alpha?: any;
                $value?: string | undefined;
                $description?: string | undefined;
                $deprecated?: string | boolean | undefined;
            } | undefined;
        } | undefined;
    } | undefined;
}>;
